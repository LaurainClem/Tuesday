// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tuesday.Repositories;

namespace Tuesday.Migrations
{
    [DbContext(typeof(DbManager))]
    [Migration("20210302133145_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Tuesday.Entities.ExigenceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ExigenceType")
                        .HasColumnType("int");

                    b.Property<int?>("JalonId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TaskEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JalonId");

                    b.HasIndex("TaskEntityId");

                    b.ToTable("Exigence");
                });

            modelBuilder.Entity("Tuesday.Entities.JalonEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Jalon");
                });

            modelBuilder.Entity("Tuesday.Entities.ProjectEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Tuesday.Entities.TaskEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AssigneeId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("JalonEntityId")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PlannedStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RealStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("RequiredTaskId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("JalonEntityId");

                    b.HasIndex("RequiredTaskId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("Tuesday.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Tuesday.Entities.ExigenceEntity", b =>
                {
                    b.HasOne("Tuesday.Entities.JalonEntity", "Jalon")
                        .WithMany()
                        .HasForeignKey("JalonId");

                    b.HasOne("Tuesday.Entities.TaskEntity", null)
                        .WithMany("Exigences")
                        .HasForeignKey("TaskEntityId");

                    b.Navigation("Jalon");
                });

            modelBuilder.Entity("Tuesday.Entities.JalonEntity", b =>
                {
                    b.HasOne("Tuesday.Entities.UserEntity", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Tuesday.Entities.ProjectEntity", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("Tuesday.Entities.TaskEntity", b =>
                {
                    b.HasOne("Tuesday.Entities.UserEntity", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Tuesday.Entities.JalonEntity", null)
                        .WithMany("Tasks")
                        .HasForeignKey("JalonEntityId");

                    b.HasOne("Tuesday.Entities.TaskEntity", "RequiredTask")
                        .WithMany()
                        .HasForeignKey("RequiredTaskId");

                    b.Navigation("Assignee");

                    b.Navigation("RequiredTask");
                });

            modelBuilder.Entity("Tuesday.Entities.JalonEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Tuesday.Entities.TaskEntity", b =>
                {
                    b.Navigation("Exigences");
                });
#pragma warning restore 612, 618
        }
    }
}
